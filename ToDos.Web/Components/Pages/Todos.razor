@page "/todos"
@attribute [Authorize] 
@using ToDos.Data
@rendermode InteractiveServer
@inject IHttpClientFactory HttpFactory
@inject NavigationManager Nav

<h1 class="display-6 mb-3 d-flex align-items-center gap-2">
  TODO Bingos
</h1>
<AuthorizeView>
    <Authorized>
        <p>Congratulations! You're authorized to browser this page!</p>
    </Authorized>
    <NotAuthorized>
        <p>You need to <a href="/login">log in</a> to view tasks.</p>
    </NotAuthorized>
</AuthorizeView>

<!-- Progress Bar -->
@if (_items.Count > 0)
{
    var done = _items.Count(i => i.IsCompleted);
    var pct = (int)Math.Round(100.0 * done / _items.Count);
    <div class="mb-3">
        <div class="d-flex justify-content-between small text-muted mb-1">
            <span>@done / @_items.Count completed</span>
            <span>@pct%</span>
        </div>
        <div class="progress"><div class="progress-bar" style="width:@pct%"></div></div>
    </div>
}

<!-- Add form -->
<div class="card shadow-sm mb-3">
  <div class="card-body">
    <div class="row g-2 align-items-end">
      <div class="col-12 col-md-6">
        <label class="form-label">Title</label>
        <input class="form-control" @bind="_newTitle" placeholder="What needs to be done?" />
      </div>
      <div class="col-6 col-md-3">
        <label class="form-label">Due date</label>
        <input class="form-control" type="date" @bind="_newDueDate" />
      </div>
      <div class="col-6 col-md-2">
        <label class="form-label">Priority</label>
        <select class="form-select" @bind="_newPriority">
          <option value="@TodoPriority.Low">Low</option>
          <option value="@TodoPriority.Normal">Normal</option>
          <option value="@TodoPriority.High">High</option>
          <option value="@TodoPriority.Urgent">Urgent</option>
        </select>
      </div>
      <div class="col-12 col-md-1 d-grid">
        <button class="btn btn-primary" @onclick="Add">Add</button>
      </div>
    </div>
  </div>
</div>

<!-- Filters / actions -->
<div class="d-flex flex-wrap align-items-center gap-2 mb-3">
  <div class="btn-group" role="group">
    <button class="btn btn-sm @(_filter is Filter.All ? "btn-primary" : "btn-outline-primary")" @onclick="() => SetFilter(Filter.All)">All</button>
    <button class="btn btn-sm @(_filter is Filter.Active ? "btn-primary" : "btn-outline-primary")" @onclick="() => SetFilter(Filter.Active)">Active</button>
    <button class="btn btn-sm @(_filter is Filter.Completed ? "btn-primary" : "btn-outline-primary")" @onclick="() => SetFilter(Filter.Completed)">Completed</button>
  </div>
  <div class="ms-auto d-flex gap-2">
    <button class="btn btn-sm btn-outline-secondary" @onclick="Load">â†» Refresh</button>
    <button class="btn btn-sm btn-outline-danger" @onclick="ClearCompleted">ðŸ§¹ Clear completed</button>
  </div>
</div>

@if (_filtered.Count == 0)
{
  <div class="text-center text-muted py-5">
    <div class="fs-4">No tiles yet.</div>
    <div>Add a task above to fill the grid.</div>
  </div>
}
else
{
  <!-- BINGO SHEET -->
  <div class="bingo-grid">
      @foreach (var item in _filtered)
      {
          var overdue = IsOverdue(item);
          <button class="bingo-tile @(item.IsCompleted ? "done" : "") @(overdue ? "overdue" : "")"
                  title="Click to toggle"
                  @onclick="() => Toggle(item)"
                  aria-pressed="@item.IsCompleted">

              @* corner badge only when overdue *@
              @if (overdue)
              {
                  <span class="ribbon">OVERDUE!!</span>
              }

              <div class="tile-title">@item.Title</div>

              <div class="tile-meta">
                  @if (item.DueDate is not null)
                  {
                      <span class="chip chip-light">Due on @item.DueDate?.ToString("dd.MM.yyyy")</span>
                  }
                  <span class="chip @(ChipFor(item.Priority))">@item.Priority</span>
              </div>

              <div class="tick" aria-hidden="true">âœ“</div>
          </button>
      }
  </div>
}

@code {
    private List<TodoItemDto> _items = new();
    private List<TodoItemDto> _filtered = new();
    private string _newTitle = "";
    private DateTime? _newDueDate;
    private TodoPriority _newPriority = TodoPriority.Normal;
    private HttpClient HttpClient => HttpFactory.CreateClient("self");

    private enum Filter { All, Active, Completed }
    private Filter _filter = Filter.All;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        HttpClient.BaseAddress ??= new Uri(Nav.BaseUri);
        await Load();
    }

    private async Task Load()
    {
        Console.Error.WriteLine("DEBUG: BREAKPOINT-11");
        _items = await HttpClient.GetFromJsonAsync<List<TodoItemDto>>("/api/todos") ?? new();
        Console.Error.WriteLine("DEBUG: BREAKPOINT-12");
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        IEnumerable<TodoItemDto> q = _filter switch
        {
            Filter.Active    => _items.Where(i => !i.IsCompleted),
            Filter.Completed => _items.Where(i =>  i.IsCompleted),
            _                => _items.AsEnumerable()
        };

        _filtered = q
            .OrderBy(i => i.IsCompleted)                                // incomplete first
            .ThenBy(i => i.DueDate ?? DateTimeOffset.MaxValue)          // earliest due next
            .ThenByDescending(i => i.CreatedDate)                       // newest created last
            .ToList();
        
        StateHasChanged();
    }

    private void SetFilter(Filter f)
    {
        _filter = f;
        ApplyFilter();
    }

    private async Task Add()
    {
        if (string.IsNullOrWhiteSpace(_newTitle))
        {
            return;
        }

        DateTimeOffset? due = null;
        if (_newDueDate is not null)
        {
            due = new DateTimeOffset(_newDueDate.Value);
        }

        var create = new TodoItemDto(
            Guid.Empty,
            _newTitle.Trim(),
            false,
            due,
            DateTimeOffset.UtcNow,
            _newPriority,
            null
        );

        var resp = await HttpClient.PostAsJsonAsync("/api/todos", create);
        if (resp.IsSuccessStatusCode)
        {
            _newTitle = "";
            _newDueDate = null;
            _newPriority = TodoPriority.Normal;
            await Load();
        }
    }

    private async Task Toggle(TodoItemDto item)
    {
        var updated = item with { IsCompleted = !item.IsCompleted };
        var resp = await HttpClient.PutAsJsonAsync($"/api/todos/{item.Id}", updated);
        if (resp.IsSuccessStatusCode) await Load();
    }

    private async Task Delete(Guid id)
    {
        var resp = await HttpClient.DeleteAsync($"/api/todos/{id}");
        if (resp.IsSuccessStatusCode) await Load();
    }

    private async Task ClearCompleted()
    {
        var completed = _items.Where(i => i.IsCompleted).ToList();
        foreach (var it in completed)
            await HttpClient.DeleteAsync($"/api/todos/{it.Id}");
        await Load();
    }

    private static string ChipFor(TodoPriority p) => p switch
    {
        TodoPriority.Urgent => "chip-urgent",
        TodoPriority.High   => "chip-high",
        TodoPriority.Normal => "chip-normal",
        _ => "chip-low"
    };
    
    private static bool IsOverdue(TodoItemDto i) =>
        !i.IsCompleted && i.DueDate is { } d && d < DateTimeOffset.Now; // use UtcNow if you store UTC everywhere

    public record TodoItemDto(
        Guid Id,
        string Title,
        bool IsCompleted,
        DateTimeOffset? DueDate,
        DateTimeOffset CreatedDate,
        TodoPriority Priority,
        string? Description
    );
}

<style>
/* Bingo grid layout */
.bingo-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 14px;
}

/* Tile */
.bingo-tile {
  position: relative;
  display: flex;
  flex-direction: column;
  gap: .35rem;
  width: 100%;
  min-height: 140px;
  padding: 14px;
  text-align: left;
  background: #fff;
  border: 1px solid #e8e8e8;
  border-radius: 16px;
  box-shadow: 0 1px 2px rgba(0,0,0,.03);
  cursor: pointer;
  transition: transform .08s ease, box-shadow .12s ease, border-color .12s ease;
}
.bingo-tile:hover { transform: translateY(-2px); box-shadow: 0 6px 14px rgba(0,0,0,.06); border-color: #dcdcdc; }
.bingo-tile:focus { outline: 3px solid #bde0fe; outline-offset: 2px; }

/* Completed state */
.bingo-tile.done {
  background: #f4f8f4;
  border-color: #d4ead4;
  opacity: .92;
}
.bingo-tile .tick {
  position: absolute;
  right: 12px;
  top: 10px;
  font-size: 28px;
  line-height: 1;
  color: #0a7b34;
  opacity: 0;
  transform: scale(.8);
  transition: opacity .12s ease, transform .12s ease;
}
.bingo-tile.done .tick { opacity: 1; transform: scale(1); }

/* Title + meta chips */
.tile-title {
  font-weight: 600;
  word-wrap: break-word;
}
.tile-meta {
  margin-top: auto;
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
  align-items: center;
}
/* Corner ribbon on overdue tiles */
.ribbon {
    position: absolute;
    top: -10px;
    left: -5px;
    background: #b42318;
    color: #fff;
    font-size: .65rem;
    font-weight: 700;
    padding: 3px 10px;
    border-radius: 0 10px 10px 0;
    box-shadow: 0 2px 6px rgba(180,35,24,.25);
    /*letter-spacing: .5px;*/
}

/* Subtle overdue emphasis (kept minimal, no banner) */
.bingo-tile.overdue {
    border-color: #ffb3b3;
    box-shadow: 0 0 0 3px rgba(255, 0, 0, .06) inset;
}

.chip {
  display: inline-flex;
  align-items: center;
  gap: .25rem;
  padding: 2px 8px;
  border-radius: 999px;
  font-size: .75rem;
  line-height: 1.3;
  border: 1px solid #e5e5e5;
}

.chip-low { background: #f9fafb; color: #333; }
.chip-normal { background: #e8f0fe; color: #0b57d0; border-color: #d6e4fd; }
.chip-high { background: #fde8e8; color: #444; }
.chip-urgent { background: #fcb8db; color: #b42318; border-color: #f7d3d3; }
.chip-overdue { background: #ffe5e5; color: #b42318; border-color: #ffcaca; }

/* Small helpers */
.progress { height: 8px; border-radius: 999px; overflow: hidden; }
.progress-bar { background: #0d6efd; }
</style>

